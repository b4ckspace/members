// Code generated by MockGen. DO NOT EDIT.
// Source: smtp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	tls "crypto/tls"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockSmtpConn is a mock of SmtpConn interface
type MockSmtpConn struct {
	ctrl     *gomock.Controller
	recorder *MockSmtpConnMockRecorder
}

// MockSmtpConnMockRecorder is the mock recorder for MockSmtpConn
type MockSmtpConnMockRecorder struct {
	mock *MockSmtpConn
}

// NewMockSmtpConn creates a new mock instance
func NewMockSmtpConn(ctrl *gomock.Controller) *MockSmtpConn {
	mock := &MockSmtpConn{ctrl: ctrl}
	mock.recorder = &MockSmtpConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSmtpConn) EXPECT() *MockSmtpConnMockRecorder {
	return m.recorder
}

// Data mocks base method
func (m *MockSmtpConn) Data() (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Data indicates an expected call of Data
func (mr *MockSmtpConnMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockSmtpConn)(nil).Data))
}

// Mail mocks base method
func (m *MockSmtpConn) Mail(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mail indicates an expected call of Mail
func (mr *MockSmtpConnMockRecorder) Mail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mail", reflect.TypeOf((*MockSmtpConn)(nil).Mail), arg0)
}

// Rcpt mocks base method
func (m *MockSmtpConn) Rcpt(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rcpt", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rcpt indicates an expected call of Rcpt
func (mr *MockSmtpConnMockRecorder) Rcpt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rcpt", reflect.TypeOf((*MockSmtpConn)(nil).Rcpt), arg0)
}

// StartTLS mocks base method
func (m *MockSmtpConn) StartTLS(arg0 *tls.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTLS", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTLS indicates an expected call of StartTLS
func (mr *MockSmtpConnMockRecorder) StartTLS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTLS", reflect.TypeOf((*MockSmtpConn)(nil).StartTLS), arg0)
}

// Close mocks base method
func (m *MockSmtpConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSmtpConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSmtpConn)(nil).Close))
}
