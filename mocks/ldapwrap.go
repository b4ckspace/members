// Code generated by MockGen. DO NOT EDIT.
// Source: ldapwrap.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	core "github.com/b4ckspace/members/internal/core"
	gomock "github.com/golang/mock/gomock"
	ldap_v3 "gopkg.in/ldap.v3"
	reflect "reflect"
)

// MockLdapConn is a mock of LdapConn interface
type MockLdapConn struct {
	ctrl     *gomock.Controller
	recorder *MockLdapConnMockRecorder
}

// MockLdapConnMockRecorder is the mock recorder for MockLdapConn
type MockLdapConnMockRecorder struct {
	mock *MockLdapConn
}

// NewMockLdapConn creates a new mock instance
func NewMockLdapConn(ctrl *gomock.Controller) *MockLdapConn {
	mock := &MockLdapConn{ctrl: ctrl}
	mock.recorder = &MockLdapConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLdapConn) EXPECT() *MockLdapConnMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockLdapConn) Add(arg0 *ldap_v3.AddRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockLdapConnMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLdapConn)(nil).Add), arg0)
}

// Modify mocks base method
func (m *MockLdapConn) Modify(arg0 *ldap_v3.ModifyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Modify indicates an expected call of Modify
func (mr *MockLdapConnMockRecorder) Modify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockLdapConn)(nil).Modify), arg0)
}

// Search mocks base method
func (m *MockLdapConn) Search(arg0 *ldap_v3.SearchRequest) (*ldap_v3.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].(*ldap_v3.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockLdapConnMockRecorder) Search(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLdapConn)(nil).Search), arg0)
}

// Close mocks base method
func (m *MockLdapConn) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockLdapConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLdapConn)(nil).Close))
}

// MockLdapDialer is a mock of LdapDialer interface
type MockLdapDialer struct {
	ctrl     *gomock.Controller
	recorder *MockLdapDialerMockRecorder
}

// MockLdapDialerMockRecorder is the mock recorder for MockLdapDialer
type MockLdapDialerMockRecorder struct {
	mock *MockLdapDialer
}

// NewMockLdapDialer creates a new mock instance
func NewMockLdapDialer(ctrl *gomock.Controller) *MockLdapDialer {
	mock := &MockLdapDialer{ctrl: ctrl}
	mock.recorder = &MockLdapDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLdapDialer) EXPECT() *MockLdapDialerMockRecorder {
	return m.recorder
}

// Dial mocks base method
func (m *MockLdapDialer) Dial(arg0 context.Context) (core.LdapWrap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", arg0)
	ret0, _ := ret[0].(core.LdapWrap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial
func (mr *MockLdapDialerMockRecorder) Dial(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockLdapDialer)(nil).Dial), arg0)
}

// MockLdapWrap is a mock of LdapWrap interface
type MockLdapWrap struct {
	ctrl     *gomock.Controller
	recorder *MockLdapWrapMockRecorder
}

// MockLdapWrapMockRecorder is the mock recorder for MockLdapWrap
type MockLdapWrapMockRecorder struct {
	mock *MockLdapWrap
}

// NewMockLdapWrap creates a new mock instance
func NewMockLdapWrap(ctrl *gomock.Controller) *MockLdapWrap {
	mock := &MockLdapWrap{ctrl: ctrl}
	mock.recorder = &MockLdapWrapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLdapWrap) EXPECT() *MockLdapWrapMockRecorder {
	return m.recorder
}

// RegisterMember mocks base method
func (m *MockLdapWrap) RegisterMember(user, email, mlEmail string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMember", user, email, mlEmail)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMember indicates an expected call of RegisterMember
func (mr *MockLdapWrapMockRecorder) RegisterMember(user, email, mlEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMember", reflect.TypeOf((*MockLdapWrap)(nil).RegisterMember), user, email, mlEmail)
}

// SetPassword mocks base method
func (m *MockLdapWrap) SetPassword(token, password, doorpass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", token, password, doorpass)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword
func (mr *MockLdapWrapMockRecorder) SetPassword(token, password, doorpass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockLdapWrap)(nil).SetPassword), token, password, doorpass)
}

// MemberExists mocks base method
func (m *MockLdapWrap) MemberExists(uid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberExists", uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberExists indicates an expected call of MemberExists
func (mr *MockLdapWrapMockRecorder) MemberExists(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberExists", reflect.TypeOf((*MockLdapWrap)(nil).MemberExists), uid)
}

// PasswordReset mocks base method
func (m *MockLdapWrap) PasswordReset(nickname string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordReset", nickname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PasswordReset indicates an expected call of PasswordReset
func (mr *MockLdapWrapMockRecorder) PasswordReset(nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordReset", reflect.TypeOf((*MockLdapWrap)(nil).PasswordReset), nickname)
}
